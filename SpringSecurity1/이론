Authentication
Principal과 GrantAuthority 제공.

Principal
“누구"에 해당하는 정보. 
UserDetailsService에서 리턴한 그 객체.
객체는 UserDetails 타입.
GrantAuthority: 
“ROLE_USER”, “ROLE_ADMIN”등 Principal이 가지고 있는 “권한”을 나타낸다.
인증 이후, 인가 및 권한 확인할 때 이 정보를 참조한다.

UserDetails
애플리케이션이 가지고 있는 유저 정보와 스프링 시큐리티가 사용하는 Authentication 객체 사이의 어댑터.
UserDetailsService
유저 정보를 UserDetails 타입으로 가져오는 DAO (Data Access Object) 인터페이스.



AuthenticationManager와 Authentication
스프링 시큐리티에서 인증(Authentication)은 AuthenticationManager가 한다.

Authentication authenticate(Authentication authentication) throws AuthenticationException;

인자로 받은 Authentication이 유효한 인증인지 확인하고 Authentication 객체를 리턴한다.
인증을 확인하는 과정에서 비활성 계정, 잘못된 비번, 잠긴 계정 등의 에러를 던질 수 있다.

인자로 받은 Authentication
사용자가 입력한 인증에 필요한 정보(username, password)로 만든 객체. (폼 인증인 경우)
Authentication
Principal: “keesun”
Credentials: “123”

유효한 인증인지 확인
사용자가 입력한 password가 UserDetailsService를 통해 읽어온 UserDetails 객체에 들어있는 password와 일치하는지 확인
해당 사용자 계정이 잠겨 있진 않은지, 비활성 계정은 아닌지 등 확인




ThreadLocal
Java.lang 패키지에서 제공하는 쓰레드 범위 변수. 즉, 쓰레드 수준의 데이터 저장소.
같은 쓰레드 내에서만 공유.
따라서 같은 쓰레드라면 해당 데이터를 메소드 매개변수로 넘겨줄 필요 없음.
SecurityContextHolder의 기본 전략.

Authencation과 SecurityContextHodler
AuthenticationManager가 인증을 마친 뒤 리턴 받은 Authentication 객체의 행방은?

UsernamePasswordAuthenticationFilter
폼 인증을 처리하는 시큐리티 필터
인증된 Authentication 객체를 SecurityContextHolder에 넣어주는 필터
SecurityContextHolder.getContext().setAuthentication(authentication)

SecurityContextPersisenceFilter
SecurityContext를 HTTP session에 캐시(기본 전략)하여 여러 요청에서 Authentication을 공유할 수 있 공유하는 필터.
SecurityContextRepository를 교체하여 세션을 HTTP session이 아닌 다른 곳에 저장하는 것도 가능하다.







스프링 시큐리티 Filter와 FilterChainProxy
스프링 시큐리티가 제공하는 필터들
WebAsyncManagerIntergrationFilter
SecurityContextPersistenceFilter
HeaderWriterFilter
CsrfFilter
LogoutFilter
UsernamePasswordAuthenticationFilter
DefaultLoginPageGeneratingFilter
DefaultLogoutPageGeneratingFilter
BasicAuthenticationFilter
RequestCacheAwareFtiler
SecurityContextHolderAwareReqeustFilter
AnonymouseAuthenticationFilter
SessionManagementFilter
ExeptionTranslationFilter
FilterSecurityInterceptor

이 모든 필터는 FilterChainProxy가 호출한다.




DelegatingFilterProxy와 FilterChainProxy

DelegatingFilterProxy
일반적인 서블릿 필터.
서블릿 필터 처리를 스프링에 들어있는 빈으로 위임하고 싶을 때 사용하는 서블릿 필터.
타겟 빈 이름을 설정한다.
스프링 부트 없이 스프링 시큐리티 설정할 때는 AbstractSecurityWebApplicationInitializer를 사용해서 등록.
스프링 부트를 사용할 때는 자동으로 등록 된다. (SecurityFilterAutoConfiguration)

FilterChainProxy
보통 “springSecurityFilterChain” 이라는 이름의 빈으로 등록된다.


Authentication 객체를 리턴
Authentication
Principal: UserDetailsService에서 리턴한 그 객체 (User)
Credentials: 
GrantedAuthorities



AccessDecisionManager 

Access Control 결정을 내리는 인터페이스로, 구현체 3가지를 기본으로 제공한다.
AffirmativeBased: 여러 Voter중에 한명이라도 허용하면 허용. 기본 전략.
ConsensusBased: 다수결
UnanimousBased: 만장일치

AccessDecisionVoter
해당 Authentication이 특정한 Object에 접근할 때 필요한 ConfigAttributes를 만족하는지 확인한다.
WebExpressionVoter: 웹 시큐리티에서 사용하는 기본 구현체, ROLE_Xxxx가 매치하는지 확인.
RoleHierarchyVoter: 계층형 ROLE 지원. ADMIN > MANAGER > USER

FilterSecurityInterceptor

AccessDecisionManager를 사용하여 Access Control 또는 예외 처리 하는 필터.
대부분의 경우 FilterChainProxy에 제일 마지막 필터로 들어있다.


WebSecurity의 ignoring()을 사용해서 시큐리티 필터 적용을 제외할 요청을 설정할 수 있다.


Async 웹 MVC를 지원하는 필터: WebAsyncManagerIntegrationFilter
스프링 MVC의 Async 기능(핸들러에서 Callable을 리턴할 수 있는 기능)을 사용할 때에도 SecurityContext를 공유하도록 도와주는 필터.
PreProcess: SecurityContext를 설정한다.
Callable: 비록 다른 쓰레드지만 그 안에서는 동일한 SecurityContext를 참조할 수 있다.
PostProcess: SecurityContext를 정리(clean up)한다.

스프링 시큐리티와 @Async
@Async를 사용한 서비스를 호출하는 경우
쓰레드가 다르기 때문에 SecurityContext를 공유받지 못한다.


SecurityContext 영속화 필터: SecurityContextPersistenceFilter

SecurityContextRepository를 사용해서 기존의 SecurityContext를 읽어오거나 초기화 한다.
기본으로 사용하는 전략은 HTTP Session을 사용한다.
Spring-Session과 연동하여 세션 클러스터를 구현할 수 있다. 






ExceptionTranslationFilter
필터 체인에서 발생하는 AccessDeniedException과 AuthenticationException을 처리하는 필터

AuthenticationException 발생 시
AuthenticationEntryPoint 실행
AbstractSecurityInterceptor 하위 클래스(예, FilterSecurityInterceptor)에서 발생하는 예외만 처리.
그렇다면 UsernamePasswordAuthenticationFilter에서 발생한 인증 에러는?

AccessDeniedException 발생 시
익명 사용자라면 AuthenticationEntryPoint 실행
익명 사용자가 아니면 AccessDeniedHandler에게 위임




시큐리티 관련 헤더 추가하는 필터: HeaderWriterFilter

응답 헤더에 시큐리티 관련 헤더를 추가해주는 필터
XContentTypeOptionsHeaderWriter: 마임 타입 스니핑 방어.
XXssProtectionHeaderWriter: 브라우저에 내장된 XSS 필터 적용.
CacheControlHeadersWriter: 캐시 히스토리 취약점 방어.
HstsHeaderWriter: HTTPS로만 소통하도록 강제.
XFrameOptionsHeaderWriter: clickjacking 방어.

Cache-Control: no-cache, no-store, max-age=0, must-revalidate
Content-Language: en-US
Content-Type: text/html;charset=UTF-8
Date: Sun, 04 Aug 2019 16:25:10 GMT
Expires: 0
Pragma: no-cache
Transfer-Encoding: chunked
X-Content-Type-Options: nosniff
X-Frame-Options: DENY
X-XSS-Protection: 1; mode=block



CSRF 어택 방지 필터: CsrfFilter
CSRF 어택 방지 필터
인증된 유저의 계정을 사용해 악의적인 변경 요청을 만들어 보내는 기법.
https://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF)
https://namu.wiki/w/CSRF
CORS를 사용할 때 특히 주의 해야 함.
타 도메인에서 보내오는 요청을 허용하기 때문에...
https://en.wikipedia.org/wiki/Cross-origin_resource_sharing

로그아웃 처리 필터: LogoutFilter
여러 LogoutHandler를 사용하여 로그아웃시 필요한 처리를 하며 이후에는 LogoutSuccessHandler를 사용하여 로그아웃 후처리를 한다.




폼 인증 처리 필터: UsernamePasswordAuthenticationFilter



DefaultLoginPageGeneratingFilter
기본 로그인 폼 페이지를 생성해주는 필터
GET /login 요청을 처리하는 필터.


요청 캐시 필터: RequestCacheAwareFilter
현재 요청과 관련 있는 캐시된 요청이 있는지 찾아서 적용하는 필터.
캐시된 요청이 없다면, 현재 요청 처리
캐시된 요청이 있다면, 해당 캐시된 요청 처리

시큐리티 관련 서블릿 스팩 구현 필터: SecurityContextHolderAwareRequestFilter
시큐리티 관련 서블릿 API를 구현해주는 필터
HttpServletRequest#authenticate(HttpServletResponse)
HttpServletRequest#login(String, String)
HttpServletRequest#logout()
AsyncContext#start(Runnable



세션 관리 필터: SessionManagementFilter


인증/인가 예외 처리 필터: ExceptionTranslationFilter


인가 처리 필터: FilterSecurityInterceptor


토큰 기반 인증 필터 : RememberMeAuthenticationFilter
